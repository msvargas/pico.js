{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","shapeRef","useRef","withPupilsRef","camvas","useEffect","a","pico","initialized","load","console","log","i","init","ctx","document","getElementsByTagName","getContext","image","defaultSizeImage","current","Camvas","video","dt","drawImage","rgba","getImageData","data","pixels","rgba_to_grayscale","dets","run_cascade","facefinder_classify_region","defaultParams","update_memory","cluster_detections","length","r","c","s","middleSize","beginPath","value","arc","Math","PI","rect","lineWidth","strokeStyle","stroke","checked","do_puploc","listener","e","Date","toLocaleString","type","addEventListener","removeEventListener","className","href","ref","defaultChecked","name","onClick","play","pause","stop","width","height","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5604786.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport pico, {\n  rgba_to_grayscale,\n  update_memory,\n  do_puploc,\n  facefinder_classify_region,\n  defaultParams,\n  defaultSizeImage,\n  Camvas\n} from \"@msvargas97/pico.js\";\n\nfunction App() {\n  const shapeRef = useRef();\n  const withPupilsRef = useRef();\n  const camvas = useRef(null);\n\n  useEffect(() => {\n    async function init() {\n      if (!pico.initialized) {\n        await pico.load();\n        console.log(\"pico loaded succesfull!\");\n      }\n    }\n    init();\n    let i;\n    const ctx = document.getElementsByTagName(\"canvas\")[0].getContext(\"2d\");\n    const image = defaultSizeImage;\n    const processfn = function(video, dt) {\n      // render the video frame to the canvas element and extract RGBA pixel data\n      ctx.drawImage(video, 0, 0);\n      const rgba = ctx.getImageData(0, 0, 640, 480).data;\n      // prepare input to `run_cascade`\n      image.pixels = rgba_to_grayscale(rgba, 480, 640);\n      // run the cascade over the frame and cluster the obtained detections\n      // dets is an array that contains (r, c, s, q) quadruplets\n      // (representing row, column, scale and detection score)\n      let dets = pico.run_cascade(\n        image,\n        facefinder_classify_region,\n        defaultParams\n      );\n      dets = update_memory(dets);\n      dets = pico.cluster_detections(dets, 0.3); // set IoU threshold to 0.2\n      // draw detections\n      for (i = 0; i < dets.length; ++i)\n        // check the detection score\n        // if it's above the threshold, draw it\n        // (the constant 50.0 is empirical: other cascades might require a different one)\n        if (dets[i][3] > 50.0) {\n          var r, c, s;\n          const middleSize = dets[i][2] * 0.5;\n          ctx.beginPath();\n          if (shapeRef.current.value === \"circle\") {\n            ctx.arc(dets[i][1], dets[i][0], middleSize, 0, 2 * Math.PI, false);\n          } else {\n            ctx.rect(\n              dets[i][1] - middleSize,\n              dets[i][0] - middleSize,\n              dets[i][2],\n              dets[i][2]\n            );\n          }\n          ctx.lineWidth = 4;\n          ctx.strokeStyle = \"royalblue\";\n          ctx.stroke();\n          if (!withPupilsRef.current.checked) continue;\n          //\n          // find the eye pupils for each detected face\n          // starting regions for localization are initialized based on the face bounding box\n          // (parameters are set empirically)\n          // first eye\n          r = dets[i][0] - 0.075 * dets[i][2];\n          c = dets[i][1] - 0.175 * dets[i][2];\n          s = 0.35 * dets[i][2];\n          [r, c] = do_puploc(r, c, s, 127, image);\n          if (r >= 0 && c >= 0) {\n            ctx.beginPath();\n            ctx.arc(c, r, 2, 0, 2 * Math.PI, false);\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"limegreen\";\n            ctx.stroke();\n          }\n          // second eye\n          r = dets[i][0] - 0.075 * dets[i][2];\n          c = dets[i][1] + 0.175 * dets[i][2];\n          s = 0.35 * dets[i][2];\n          [r, c] = do_puploc(r, c, s, 127, image);\n          if (r >= 0 && c >= 0) {\n            ctx.beginPath();\n            ctx.arc(c, r, 2, 0, 2 * Math.PI, false);\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"limegreen\";\n            ctx.stroke();\n          }\n        }\n    };\n    camvas.current = new Camvas(processfn); //camera canvas\n    const listener = e => {\n      console.log(\n        `${new Date().toLocaleString()} Camera canvas ${e.type} event...`\n      );\n    };\n    camvas.current.video.addEventListener(\"play\", listener);\n    camvas.current.video.addEventListener(\"pause\", listener);\n\n    return () => {\n      camvas.current.video.removeEventListener(\"play\", listener);\n      camvas.current.video.removeEventListener(\"pause\", listener);\n      camvas.current = null;\n    };\n  }, []);\n\n  const onPlay = () => camvas.current.play();\n  const onPause = () => camvas.current.pause();\n  const onStop = () => camvas.current.stop();\n\n  return (\n    <div className=\"App\">\n      <hr />\n      <section>\n        <h3>\n          Using pico.js and lploc.js for real-time localization of eye pupils\n        </h3>\n        <p>Click the button below and allow the page to access your webcam.</p>\n        <p>\n          <b>\n            All the processing is done on the client side, i.e., without sending\n            images to a server.\n          </b>\n        </p>\n        <p>\n          Original example: More information about the algotihm is available{\" \"}\n          <a href=\"https://tehnokv.com/posts/puploc-with-trees/demo/\">here</a>.\n        </p>\n      </section>\n      <hr />\n      <div>\n        <center>\n          <label>\n            <input type=\"checkbox\" ref={withPupilsRef} defaultChecked />\n            with pupils\n          </label>\n          <select name=\"shape\" ref={shapeRef}>\n            <option value=\"shape\">Square</option>\n            <option value=\"circle\">Circle</option>\n          </select>\n        </center>\n      </div>\n      <div>\n        <center>\n          <input type=\"button\" value={`Start`} onClick={onPlay} />\n          <span>{\"  \"}</span>\n          <input type=\"button\" value={`Pause`} onClick={onPause} />\n          <span>{\"  \"}</span>\n          <input type=\"button\" value={`Stop`} onClick={onStop} />\n        </center>\n      </div>\n      <div>\n        <center>\n          <canvas width=\"640\" height=\"480\"></canvas>\n        </center>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}